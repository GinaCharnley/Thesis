## CHAPTER 2 - Exploring relationships between drought and epidemic cholera in Africa using generalised linear models
## COVARIATE SELECTION, GENERALISED LINEAR MODEL FITTING & PROJECTIONS, AUTOCORRELATION

# Packages 
library(dplyr)
library(magrittr)
library(corrplot)
library(ggplot2)
library(tidyr)
library(caret)
library(MASS)
library(pROC)
library(nlme)
library(MuMIn)
library(car)
library(boot)
library(plyr)
library(mosaic)

`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````

## COVARIATE SELECTION
data1 <- read_excel("Multivariate_model_data.xlsx", sheet = "Sheet2")

# Remove missing entries and year/country column
data1$Year <- NULL
data1$Code <- NULL
data1 <- na.omit(data1)

# Get full list of covariates
covar_to_test <- names(data1)[2:(ncol(data1))] # Starts at 2, to exclude outbreak
as.data.frame(covar_to_test)

# Remove covariates that are not significantly associated with the data at p=<0.1, through fitting univariate models and examining the p-values
mod <- list()
pvalues <- rep(NA, length(covar_to_test))
coeffs <- rep(NA, length(covar_to_test))
BICs <- rep(NA, length(covar_to_test))
for(i in 1:length(covar_to_test)){
  mod[[i]] <- glm( paste0("Outbreak~",covar_to_test[i]), 
           data = data1, family=binomial(link="cloglog"))
  
  pvalues[i] <- coef(summary(mod[[i]]))[,4]
  coeffs[i] <- coef(summary(mod[[i]]))[,1]
  BICs[i] <- BIC(mod[[i]])
}
df <-  data.frame(covariate = covar_to_test, 
                        pvalue = pvalues, 
                        coeff = coeffs,
                        BIC = BICs) %>% 
               arrange(-pvalues)
df
df %<>% filter(pvalue < 0.1)
covar_to_test = as.character(df$covariate)

# Examine covariates that are highly correlated
reduced_dat <-  data1[, covar_to_test]
reduced_dat_cor <-  cor(reduced_dat)
heatmap(reduced_dat_cor, keep.dendro = TRUE)
cor_df <- as.data.frame(reduced_dat_cor) 
cor_df$param1 <- rownames(cor_df)
cor_df %<>% gather(param2, correlation, -param1)

# Group highly correlated covariates into clusters where the absolute piecewise correlation >0.75
x <- as.dist( 1-abs(cor(na.omit(data1[, na.omit(covar_to_test)]))))
out <- hclust(x)
df <-  data.frame(param1 = unique(cor_df$param1))
i = length(covar_to_test)
pairwise_cor = 1
while(i >1 & pairwise_cor>0.75){ 
  i <- i-1
  
  y <- cutree(out, k = i)
  
  tmp = data.frame(param1 = names(y), as.numeric(y))
  names(tmp)[2] = paste0("cluster", i)
  
  df %<>% left_join(tmp)
  
  
  for(c in unique(y)){
    cluster_parm = df$param1[df[,paste0("cluster", i)] == c]
    if(length(cluster_parm)>1){
      out_cor = cor(as.matrix(data1[, as.character(cluster_parm)]))
      pairwise_cor = min(min(out_cor[out_cor<1]), pairwise_cor)
    }
  }
  
}
df_out = df 
names(df_out)[2] = "cluster"
df_out %>% arrange(cluster)

# Choose those covariates in each cluster that are most correlated with our outcome variable 
df_out %<>% mutate(cor_with_case = NA)
for(i in 1:nrow(df_out)){
  df_out$cor_with_case[i] = abs(cor(data1[, c("Outbreak", 
                                            as.character(df_out$param1[i]))])[1,2])
}
df_covar <-  df_out %>% 
  group_by(cluster) %>% 
  arrange(-cor_with_case) %>% 
  summarise(param1 = first(param1))
covar_to_test = as.character(df_covar$param1)
covar_to_test

# Use the `stepAIC` function to step through model possibilities, using BIC as a criteria to assess the inclusion of each model covariate.
dat_subs <-  data1[, c("Outbreak" ,covar_to_test)] # subset 
#use stepAIC to get list of important covariates
alt_mod <-  MASS::stepAIC(glm("Outbreak~.", data = dat_subs, 
                            family=binomial(link="cloglog")), 
                        trace = FALSE,
                        k = log(nrow(dat_subs))) #turning into BIC
summary(alt_mod)
# remove those that are not significant
pvalues <- coef(summary(alt_mod))[,4]
parm_out <- names(head(sort(pvalues), 16)) #get the most significant
parm_out <- parm_out[grep("(Intercept)", parm_out, invert = T)] # remove intercept
as.data.frame(parm_out)

`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````
 
## GENERALISED LINEAR MODEL FITTING & PROJECTIONS
# Fitting the model 
fit <- glm(Outbreak ~ Mean_drought + withdrawal_percap + Avg_temp + Population_log + Poverty_headcount,
           data = data1, family = binomial)

# Calculating BIC 
BIC(fit)

# Calculating AUC
roc(data$Outbreak,fit$fitted.values,plot = TRUE, print.auc = TRUE)

# Projections 
# Import the scenario data
data_sen <- read_excel("Library/Mobile Documents/com~apple~CloudDocs/Downloads/Chapter 5 - 2030 Projections/Book1.xlsx", 
       sheet = "Sheet2")                                                                                                                       
Scenario <- data_sen$Scenario
Year <- data_sen$Year
data_sen <- data_sen[-c(1:2)]
predictions <- predict(fit, Book1, type = "response")
preds <- data.frame(Scenario, Year, predictions)
scen_data <- unique(preds$Scenario)
scen_list <- preds %>% group_split(Scenario)

boot_scen <- function(scen_data) {
  boot <- do(10000) * mean(~predictions,data = resample(scen_data))
  confint(boot, level = 0.95, method = "quantile")
}
output_list <- lapply(scen_list, boot_scen)
confs <- ldply(output_list, data.frame)
confs <- confs %>% mutate(low = estimate-lower)
confs <- confs %>% mutate(high = upper-estimate)
confs <- cbind(confs, scen_data)
confs <- confs[c(9,7,8)]
names(confs)[3]<-paste("Scenario")
preds <- merge(preds, confs, by = "Scenario", all.x = TRUE)
preds <- preds %>% mutate(lower = predictions-low)
preds <- preds %>% mutate(upper = predictions+high)
preds <- preds[c(1,2,3,6,7)]

`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````

## AUTOCORRELATION
# ISO3 code was not significantly associated with the outcome variable, but year was
# Create a dataframe with just outbreak and year 
outbreak <- data_main[c(1,2,3)]
outbreak <- outbreak %>% group_by(Year) %>% mutate(mean_outbreak = mean(Outbreak))
outbreak <- outbreak[-c(1,2)]
outbreak <- outbreak %>% distinct()

# Plot the time series and assess the linear trend 
plot(outbreak$Year, outbreak$mean_outbreak)
lm <- lm(mean_outbreak ~ Year, data = outbreak)

# Run diagnostics by looking at the plots 
par(mfrow=c(2,2))
plot(lm)
par(mfrow=c(1,1))
plot(residuals(lm))
acf(residuals(lm))

# Create a linear model accounting for autocorrelation 
lm.ac <- gls(mean_outbreak ~ Year, data = outbreak, correlation = corAR1(form = ~Year), 
             na.action = na.omit)
             
# Re-run the diagnostic plots
plot(fitted(lm.ac),residuals(lm.ac)) + abline(h=0,lty=3)
integer(0)
qqnorm(lm.ac)
acf(residuals(lm.ac,type="p"))

# Compare which is better using AIC
model.sel(lm, lm.ac)

# Test the two best models using LOO
# Specify cross-validation method 
ctrl <- trainControl(method = "LOOCV")
# Specify the outcome variable as a two level factor 
data_best$Outbreak <- as.factor(data_best$Outbreak)
# Fit the model using LOO to evaluate performance 
model <- train(Outbreak ~ Mean_drought + Avg_temp + withdrawal_percap + Population_log + Poverty_headcount, 
               data = data_best, method = "glm", trControl = ctrl)
print(model)

# Repeat for the other model
data_best2$Outbreak <- as.factor(data_best2$Outbreak)
model2 <- train(Outbreak ~ Mean_drought + Avg_temp + withdrawal_percap + Population_log + Poverty_headcount + Year + Basic_handwashing + HDI, 
                data = data_best2, method = "glm", trControl = ctrl)
print(model2)

# Compare accuracy value 
# Assess K-fold cross-validation prediction error 
cv.mse <- cv.glm(data_best, glm_best) 
cv.mse2 <- cv.glm(data_best2, glm_best2) 
cv.mse$delta
cv.mse2$delta 

