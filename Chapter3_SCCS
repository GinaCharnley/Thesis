## CHAPTER 3 - Using self-controlled case series to understand the relationship between conflict and cholera in Nigeria and the Democratic Republic of Congo
## SELF-CONTROLLED CASE SERIES NATIONAL, SUB-NATIONAL, INCIDENCE RATE RATIO, PERCENTAGE ATTRIBUTABLE FRACTION 

# Load packages 
library(dplyr)
library(survival)
library(data.table)

`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````

## SCCS - NATIONAL
# Load in data and format 
outb <- read_excel("1997-2020, all new.xlsx", sheet = "outb_nga")
conf <- read_excel("1997-2020, all new.xlsx", sheet = "conf_nga")                                                                                                            
outb <- outb[c(3,10)]
conf <- conf[c(2,10)]
names(outb)[2]<-paste("eventday")
names(conf)[2]<-paste("exday")
outb <- outb %>% distinct()
conf <- conf %>% distinct()
data1 <- merge(outb, conf, by = "Adm1", all = TRUE)
data1 <- na.omit(data1)

# Create observation period 
data1$start <- 1
data1$end <- 1220

# Create exposure period
data1$start1 <- data1$exday + 0 
data1$end0 <- data1$exday + 0
data1$end1 <- data1$exday + 1
data1$end2 <- data1$exday + 2
data1$end4 <- data1$exday + 4
data1$end6 <- data1$exday + 6
data1$end8 <- data1$exday + 8
data1$end10 <- data1$exday + 10 

# Create am ID number of each outbreaks and conflict in each Adm1
data1 <- data1  %>% 
  mutate(indiv = group_indices(., Adm1, exday, eventday)) 
data1 <- data1 %>% distinct()

# Fit the models to the data for each exposure period 
# Onset
datLong <- plyr::ddply(.data = data1,
                       .variables = "indiv",
                       .fun = function(df) {
                         
                         cuts <- with(df, sort(c(start, end, start1, end0))) 
                         
                         out <- data.frame(indiv = df$indiv,
                                           exday = df$exday,
                                           eventday = df$eventday,
                                           start = head(cuts, -1),
                                           end   = cuts[-1])
                         
                         out$event <- as.numeric(out$start <= df$eventday & df$eventday <= out$end)
                         
                         out$exgr <- as.numeric(df$start1 <= out$start & out$end <= df$end0)
                         
                         out$interval <- out$end - out$start
                         out$loginterval <- log(out$interval)
                         
                         out
                       })

datLong <- subset(datLong, start < 1220) 
datLong[datLong=="-Inf"]<-0

clogit_0 <- clogit(event ~ exgr + strata(indiv) + offset(loginterval), data = datLong)

# Week 1
datLong <- plyr::ddply(.data = data1,
                       .variables = "indiv",
                       .fun = function(df) {
                         
                         cuts <- with(df, sort(c(start, end, start1, end1))) 
                         
                         out <- data.frame(indiv = df$indiv,
                                           exday = df$exday,
                                           eventday = df$eventday,
                                           start = head(cuts, -1),
                                           end   = cuts[-1])
                         
                         out$event <- as.numeric(out$start <= df$eventday & df$eventday <= out$end)
                         
                         out$exgr <- as.numeric(df$start1 <= out$start & out$end <= df$end1)
                         
                         out$interval <- out$end - out$start
                         out$loginterval <- log(out$interval)
                         
                         out
                       })

datLong <- subset(datLong, start < 1220) 
datLong[datLong=="-Inf"]<-0

clogit_1 <- clogit(event ~ exgr + strata(indiv) + offset(loginterval), data = datLong)

# Week 2
datLong <- plyr::ddply(.data = data1,
                       .variables = "indiv",
                       .fun = function(df) {
                         
                         cuts <- with(df, sort(c(start, end, start1, end2))) 
                         
                         out <- data.frame(indiv = df$indiv,
                                           exday = df$exday,
                                           eventday = df$eventday,
                                           start = head(cuts, -1),
                                           end   = cuts[-1])
                         
                         out$event <- as.numeric(out$start <= df$eventday & df$eventday <= out$end)
                         
                         out$exgr <- as.numeric(df$start1 <= out$start & out$end <= df$end2)
                         
                         out$interval <- out$end - out$start
                         out$loginterval <- log(out$interval)
                         
                         out
                       })

datLong <- subset(datLong, start < 1220) 
datLong[datLong=="-Inf"]<-0

clogit_2 <- clogit(event ~ exgr + strata(indiv) + offset(loginterval), data = datLong)

# Week 4
datLong <- plyr::ddply(.data = data1,
                       .variables = "indiv",
                       .fun = function(df) {
                         
                         cuts <- with(df, sort(c(start, end, start1, end4))) 
                         
                         out <- data.frame(indiv = df$indiv,
                                           exday = df$exday,
                                           eventday = df$eventday,
                                           start = head(cuts, -1),
                                           end   = cuts[-1])
                         
                         out$event <- as.numeric(out$start <= df$eventday & df$eventday <= out$end)
                         
                         out$exgr <- as.numeric(df$start1 <= out$start & out$end <= df$end4)
                         
                         out$interval <- out$end - out$start
                         out$loginterval <- log(out$interval)
                         
                         out
                       })

datLong <- subset(datLong, start < 1220) 
datLong[datLong=="-Inf"]<-0

clogit_4 <- clogit(event ~ exgr + strata(indiv) + offset(loginterval), data = datLong)

# Week 6
datLong <- plyr::ddply(.data = data1,
                       .variables = "indiv",
                       .fun = function(df) {
                         
                         cuts <- with(df, sort(c(start, end, start1, end6))) 
                         
                         out <- data.frame(indiv = df$indiv,
                                           exday = df$exday,
                                           eventday = df$eventday,
                                           start = head(cuts, -1),
                                           end   = cuts[-1])
                         
                         out$event <- as.numeric(out$start <= df$eventday & df$eventday <= out$end)
                         
                         out$exgr <- as.numeric(df$start1 <= out$start & out$end <= df$end6)
                         
                         out$interval <- out$end - out$start
                         out$loginterval <- log(out$interval)
                         
                         out
                       })

datLong <- subset(datLong, start < 1220) 
datLong[datLong=="-Inf"]<-0

clogit_6 <- clogit(event ~ exgr + strata(indiv) + offset(loginterval), data = datLong)

# Week 8
datLong <- plyr::ddply(.data = data1,
                       .variables = "indiv",
                       .fun = function(df) {
                         
                         cuts <- with(df, sort(c(start, end, start1, end8))) 
                         
                         out <- data.frame(indiv = df$indiv,
                                           exday = df$exday,
                                           eventday = df$eventday,
                                           start = head(cuts, -1),
                                           end   = cuts[-1])
                         
                         out$event <- as.numeric(out$start <= df$eventday & df$eventday <= out$end)
                         
                         out$exgr <- as.numeric(df$start1 <= out$start & out$end <= df$end8)
                         
                         out$interval <- out$end - out$start
                         out$loginterval <- log(out$interval)
                         
                         out
                       })

datLong <- subset(datLong, start < 1220) 
datLong[datLong=="-Inf"]<-0

clogit_8 <- clogit(event ~ exgr + strata(indiv) + offset(loginterval), data = datLong)

# Week 10
datLong <- plyr::ddply(.data = data1,
                       .variables = "indiv",
                       .fun = function(df) {
                         
                         cuts <- with(df, sort(c(start, end, start1, end10))) 
                         
                         out <- data.frame(indiv = df$indiv,
                                           exday = df$exday,
                                           eventday = df$eventday,
                                           start = head(cuts, -1),
                                           end   = cuts[-1])
                         
                         out$event <- as.numeric(out$start <= df$eventday & df$eventday <= out$end)
                         
                         out$exgr <- as.numeric(df$start1 <= out$start & out$end <= df$end10)
                         
                         out$interval <- out$end - out$start
                         out$loginterval <- log(out$interval)
                         
                         out
                       })

datLong <- subset(datLong, start < 1220) 
datLong[datLong=="-Inf"]<-0

clogit_10 <- clogit(event ~ exgr + strata(indiv) + offset(loginterval), data = datLong)

# Save model summaries
clog0_sum <- summary(clogit_0)
clog0_bic <- BIC(clogit_0)
clog0_aic <- AIC(clogit_0)
clog0df <- data.frame(clog0_sum[["coefficients"]])
clog0df <- clog0df[-c(2,3,4)]
clog0df <- (setattr(clog0df, "row.names", c("clog0")))
clog0df <- cbind(clog0df, clog0_bic, clog0_aic)
names(clog0df)[2]<-paste("p_value")
names(clog0df)[4]<-paste("AIC")
names(clog0df)[3]<-paste("BIC")

clog1_sum <- summary(clogit_1)
clog1_bic <- BIC(clogit_1)
clog1_aic <- AIC(clogit_1)
clog1df <- data.frame(clog1_sum[["coefficients"]])
clog1df <- clog1df[-c(2,3,4)]
clog1df <- (setattr(clog1df, "row.names", c("clog1")))
clog1df <- cbind(clog1df, clog1_bic, clog1_aic)
names(clog1df)[2]<-paste("p_value")
names(clog1df)[4]<-paste("AIC")
names(clog1df)[3]<-paste("BIC")
output <- rbind(clog0df, clog1df)

clog2_sum <- summary(clogit_2)
clog2_bic <- BIC(clogit_2)
clog2_aic <- AIC(clogit_2)
clog2df <- data.frame(clog2_sum[["coefficients"]])
clog2df <- clog2df[-c(2,3,4)]
clog2df <- (setattr(clog2df, "row.names", c("clog2")))
clog2df <- cbind(clog2df, clog2_bic, clog2_aic)
names(clog2df)[2]<-paste("p_value")
names(clog2df)[4]<-paste("AIC")
names(clog2df)[3]<-paste("BIC")
output <- rbind(output, clog2df)

clog4_sum <- summary(clogit_4)
clog4_bic <- BIC(clogit_4)
clog4_aic <- AIC(clogit_4)
clog4df <- data.frame(clog4_sum[["coefficients"]])
clog4df <- clog4df[-c(2,3,4)]
clog4df <- (setattr(clog4df, "row.names", c("clog4")))
clog4df <- cbind(clog4df, clog4_bic, clog4_aic)
names(clog4df)[2]<-paste("p_value")
names(clog4df)[4]<-paste("AIC")
names(clog4df)[3]<-paste("BIC")
output <- rbind(output, clog4df)

clog6_sum <- summary(clogit_6)
clog6_bic <- BIC(clogit_6)
clog6_aic <- AIC(clogit_6)
clog6df <- data.frame(clog6_sum[["coefficients"]])
clog6df <- clog6df[-c(2,3,4)]
clog6df <- (setattr(clog6df, "row.names", c("clog6")))
clog6df <- cbind(clog6df, clog6_bic, clog6_aic)
names(clog6df)[2]<-paste("p_value")
names(clog6df)[4]<-paste("AIC")
names(clog6df)[3]<-paste("BIC")
output <- rbind(output, clog6df)

clog8_sum <- summary(clogit_8)
clog8_bic <- BIC(clogit_8)
clog8_aic <- AIC(clogit_8)
clog8df <- data.frame(clog8_sum[["coefficients"]])
clog8df <- clog8df[-c(2,3,4)]
clog8df <- (setattr(clog8df, "row.names", c("clog8")))
clog8df <- cbind(clog8df, clog8_bic, clog8_aic)
names(clog8df)[2]<-paste("p_value")
names(clog8df)[4]<-paste("AIC")
names(clog8df)[3]<-paste("BIC")
output <- rbind(output, clog8df)

clog10_sum <- summary(clogit_10)
clog10_bic <- BIC(clogit_10)
clog10_aic <- AIC(clogit_10)
clog10df <- data.frame(clog10_sum[["coefficients"]])
clog10df <- clog10df[-c(2,3,4)]
clog10df <- (setattr(clog10df, "row.names", c("clog10")))
clog10df <- cbind(clog10df, clog10_bic, clog10_aic)
names(clog10df)[2]<-paste("p_value")
names(clog10df)[4]<-paste("AIC")
names(clog10df)[3]<-paste("BIC")
output <- rbind(output, clog10df)

write.csv(output, "output1.csv")

`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````

## SCCS - SUB-NATIONAL
# The step in terms of data manipulation are exactly the same as national 
# But before you fit, you need to seperate all your dataframes by Adm1
list2env(split(data1, data1$Adm1), envir=.GlobalEnv)

# Save the admin names as a list and a vector  
adm_data <- unique(conf$Adm1)
adm_list <- (split(data1, data1$Adm1))

# Fit model for each Adm1 and exposure period and save the output
# Week 0
clog0df <- lapply(adm_list, FUN = function(adm_data) {
  datLong <- plyr::ddply(.data = adm_data,
                         .variables = "indiv",
                         .fun = function(df) {
                           
                           cuts <- with(df, sort(c(start, end, start1, end0))) 
                           
                           out <- data.frame(indiv = df$indiv,
                                             exday = df$exday,
                                             eventday = df$eventday,
                                             start = head(cuts, -1),
                                             end   = cuts[-1])
                           
                           out$event <- as.numeric(out$start <= df$eventday & df$eventday <= out$end)
                           
                           out$exgr <- as.numeric(df$start1 <= out$start & out$end <= df$end0)
                           
                           out$interval <- out$end - out$start
                           out$loginterval <- log(out$interval)
                           
                           out
                         })
  datLong <- subset(datLong, start < 1220)
  datLong[datLong=="-Inf"]<-0
  clogit_0 <- clogit(event ~ exgr + strata(indiv) + offset(loginterval), data = datLong)
  clog0_sum <- summary(clogit_0)
  clog0_bic <- BIC(clogit_0)
  clog0_aic <- AIC(clogit_0)
  clog0df <- data.frame(clog0_sum[["coefficients"]])
  clog0df <- clog0df[-c(2,3,4)]
  clog0df <- (setattr(clog0df, "row.names", c("clog0")))
  clog0df <- cbind(clog0df, clog0_bic, clog0_aic)
})
df0 <- do.call("rbind", clog0df)
row.names(df0) <- adm_data

# Week 1
clog1df <- lapply(adm_list, FUN = function(adm_data) {
  datLong <- plyr::ddply(.data = adm_data,
                         .variables = "indiv",
                         .fun = function(df) {
                           
                           cuts <- with(df, sort(c(start, end, start1, end1))) 
                           
                           out <- data.frame(indiv = df$indiv,
                                             exday = df$exday,
                                             eventday = df$eventday,
                                             start = head(cuts, -1),
                                             end   = cuts[-1])
                           
                           out$event <- as.numeric(out$start <= df$eventday & df$eventday <= out$end)
                           
                           out$exgr <- as.numeric(df$start1 <= out$start & out$end <= df$end1)
                           
                           out$interval <- out$end - out$start
                           out$loginterval <- log(out$interval)
                           
                           out
                         })
  datLong <- subset(datLong, start < 1220) 
  datLong[datLong=="-Inf"]<-0
  clogit_1 <- clogit(event ~ exgr + strata(indiv) + offset(loginterval), data = datLong)
  clog1_sum <- summary(clogit_1)
  clog1_bic <- BIC(clogit_1)
  clog1_aic <- AIC(clogit_1)
  clog1df <- data.frame(clog1_sum[["coefficients"]])
  clog1df <- clog1df[-c(2,3,4)]
  clog1df <- (setattr(clog1df, "row.names", c("clog1")))
  clog1df <- cbind(clog1df, clog1_bic, clog1_aic)
})
df1 <- do.call("rbind", clog1df)
row.names(df1) <- adm_data

# Week 2
clog2df <- lapply(adm_list, FUN = function(adm_data) {
  datLong <- plyr::ddply(.data = adm_data,
                         .variables = "indiv",
                         .fun = function(df) {
                           
                           cuts <- with(df, sort(c(start, end, start1, end2))) 
                           
                           out <- data.frame(indiv = df$indiv,
                                             exday = df$exday,
                                             eventday = df$eventday,
                                             start = head(cuts, -1),
                                             end   = cuts[-1])
                           
                           out$event <- as.numeric(out$start <= df$eventday & df$eventday <= out$end)
                           
                           out$exgr <- as.numeric(df$start1 <= out$start & out$end <= df$end2)
                           
                           out$interval <- out$end - out$start
                           out$loginterval <- log(out$interval)
                           
                           out
                         })
  datLong <- subset(datLong, start < 1220)
  datLong[datLong=="-Inf"]<-0
  clogit_2 <- clogit(event ~ exgr + strata(indiv) + offset(loginterval), data = datLong)
  clog2_sum <- summary(clogit_2)
  clog2_bic <- BIC(clogit_2)
  clog2_aic <- AIC(clogit_2)
  clog2df <- data.frame(clog2_sum[["coefficients"]])
  clog2df <- clog2df[-c(2,3,4)]
  clog2df <- (setattr(clog2df, "row.names", c("clog2")))
  clog2df <- cbind(clog2df, clog2_bic, clog2_aic)
})
df2 <- do.call("rbind", clog2df)
row.names(df2) <- adm_data

# Week 4
clog4df <- lapply(adm_list, FUN = function(adm_data) {
  datLong <- plyr::ddply(.data = adm_data,
                         .variables = "indiv",
                         .fun = function(df) {
                           
                           cuts <- with(df, sort(c(start, end, start1, end4))) 
                           
                           out <- data.frame(indiv = df$indiv,
                                             exday = df$exday,
                                             eventday = df$eventday,
                                             start = head(cuts, -1),
                                             end   = cuts[-1])
                           
                           out$event <- as.numeric(out$start <= df$eventday & df$eventday <= out$end)
                           
                           out$exgr <- as.numeric(df$start1 <= out$start & out$end <= df$end4)
                           
                           out$interval <- out$end - out$start
                           out$loginterval <- log(out$interval)
                           
                           out
                         })
  datLong <- subset(datLong, start < 1220)
  datLong[datLong=="-Inf"]<-0
  clogit_4 <- clogit(event ~ exgr + strata(indiv) + offset(loginterval), data = datLong)
  clog4_sum <- summary(clogit_4)
  clog4_bic <- BIC(clogit_4)
  clog4_aic <- AIC(clogit_4)
  clog4df <- data.frame(clog4_sum[["coefficients"]])
  clog4df <- clog4df[-c(2,3,4)]
  clog4df <- (setattr(clog4df, "row.names", c("clog4")))
  clog4df <- cbind(clog4df, clog4_bic, clog4_aic)
})
df4 <- do.call("rbind", clog4df)
row.names(df4) <- adm_data

# Week 6
clog6df <- lapply(adm_list, FUN = function(adm_data) {
  datLong <- plyr::ddply(.data = adm_data,
                         .variables = "indiv",
                         .fun = function(df) {
                           
                           cuts <- with(df, sort(c(start, end, start1, end6))) 
                           
                           out <- data.frame(indiv = df$indiv,
                                             exday = df$exday,
                                             eventday = df$eventday,
                                             start = head(cuts, -1),
                                             end   = cuts[-1])
                           
                           out$event <- as.numeric(out$start <= df$eventday & df$eventday <= out$end)
                           
                           out$exgr <- as.numeric(df$start1 <= out$start & out$end <= df$end6)
                           
                           out$interval <- out$end - out$start
                           out$loginterval <- log(out$interval)
                           
                           out
                         })
  datLong <- subset(datLong, start < 1220) 
  datLong[datLong=="-Inf"]<-0
  clogit_6 <- clogit(event ~ exgr + strata(indiv) + offset(loginterval), data = datLong)
  clog6_sum <- summary(clogit_6)
  clog6_bic <- BIC(clogit_6)
  clog6_aic <- AIC(clogit_6)
  clog6df <- data.frame(clog6_sum[["coefficients"]])
  clog6df <- clog6df[-c(2,3,4)]
  clog6df <- (setattr(clog6df, "row.names", c("clog6")))
  clog6df <- cbind(clog6df, clog6_bic, clog6_aic)
})
df6 <- do.call("rbind", clog6df)
row.names(df6) <- adm_data

# Week 8
clog8df <- lapply(adm_list, FUN = function(adm_data) {
  datLong <- plyr::ddply(.data = adm_data,
                         .variables = "indiv",
                         .fun = function(df) {
                           
                           cuts <- with(df, sort(c(start, end, start1, end8))) 
                           
                           out <- data.frame(indiv = df$indiv,
                                             exday = df$exday,
                                             eventday = df$eventday,
                                             start = head(cuts, -1),
                                             end   = cuts[-1])
                           
                           out$event <- as.numeric(out$start <= df$eventday & df$eventday <= out$end)
                           
                           out$exgr <- as.numeric(df$start1 <= out$start & out$end <= df$end8)
                           
                           out$interval <- out$end - out$start
                           out$loginterval <- log(out$interval)
                           
                           out
                         })
  datLong <- subset(datLong, start < 1220)
  datLong[datLong=="-Inf"]<-0
  clogit_8 <- clogit(event ~ exgr + strata(indiv) + offset(loginterval), data = datLong)
  clog8_sum <- summary(clogit_8)
  clog8_bic <- BIC(clogit_8)
  clog8_aic <- AIC(clogit_8)
  clog8df <- data.frame(clog8_sum[["coefficients"]])
  clog8df <- clog8df[-c(2,3,4)]
  clog8df <- (setattr(clog8df, "row.names", c("clog8")))
  clog8df <- cbind(clog8df, clog8_bic, clog8_aic)
})
df8 <- do.call("rbind", clog8df)
row.names(df8) <- adm_data

# Week 10
clog10df <- lapply(adm_list, FUN = function(adm_data) {
  datLong <- plyr::ddply(.data = adm_data,
                         .variables = "indiv",
                         .fun = function(df) {
                           
                           cuts <- with(df, sort(c(start, end, start1, end10))) 
                           
                           out <- data.frame(indiv = df$indiv,
                                             exday = df$exday,
                                             eventday = df$eventday,
                                             start = head(cuts, -1),
                                             end   = cuts[-1])
                           
                           out$event <- as.numeric(out$start <= df$eventday & df$eventday <= out$end)
                           
                           out$exgr <- as.numeric(df$start1 <= out$start & out$end <= df$end10)
                           
                           out$interval <- out$end - out$start
                           out$loginterval <- log(out$interval)
                           
                           out
                         })
  datLong <- subset(datLong, start < 1220) 
  datLong[datLong=="-Inf"]<-0
  clogit_10 <- clogit(event ~ exgr + strata(indiv) + offset(loginterval), data = datLong)
  clog10_sum <- summary(clogit_10)
  clog10_bic <- BIC(clogit_10)
  clog10_aic <- AIC(clogit_10)
  clog10df <- data.frame(clog10_sum[["coefficients"]])
  clog10df <- clog10df[-c(2,3,4)]
  clog10df <- (setattr(clog10df, "row.names", c("clog10")))
  clog10df <- cbind(clog10df, clog10_bic, clog10_aic)
})
df10 <- do.call("rbind", clog10df)
row.names(df10) <- adm_data

# Create one df with all the model outputs
df0 <- cbind(rownames(df0), data.frame(df0, row.names=NULL)) 
names(df0)[1]<-paste("State")
names(df0)[2]<-paste("Coefficient")
names(df0)[3]<-paste("p_value")
names(df0)[4]<-paste("BIC")
names(df0)[5]<-paste("AIC")
df0$Lag <- 0
df0 <- df0[c(1,6,2,3,4,5)]

df1 <- cbind(rownames(df1), data.frame(df1, row.names=NULL)) 
names(df1)[1]<-paste("State")
names(df1)[2]<-paste("Coefficient")
names(df1)[3]<-paste("p_value")
names(df1)[4]<-paste("BIC")
names(df1)[5]<-paste("AIC")
df1$Lag <- 1
df1 <- df1[c(1,6,2,3,4,5)]
full_output <- rbind(df0, df1)

df2 <- cbind(rownames(df2), data.frame(df2, row.names=NULL)) 
names(df2)[1]<-paste("State")
names(df2)[2]<-paste("Coefficient")
names(df2)[3]<-paste("p_value")
names(df2)[4]<-paste("BIC")
names(df2)[5]<-paste("AIC")
df2$Lag <- 2
df2 <- df2[c(1,6,2,3,4,5)]
full_output <- rbind(full_output, df2)

df4 <- cbind(rownames(df4), data.frame(df4, row.names=NULL)) 
names(df4)[1]<-paste("State")
names(df4)[2]<-paste("Coefficient")
names(df4)[3]<-paste("p_value")
names(df4)[4]<-paste("BIC")
names(df4)[5]<-paste("AIC")
df4$Lag <- 4
df4 <- df4[c(1,6,2,3,4,5)]
full_output <- rbind(full_output, df4)

df6 <- cbind(rownames(df6), data.frame(df6, row.names=NULL)) 
names(df6)[1]<-paste("State")
names(df6)[2]<-paste("Coefficient")
names(df6)[3]<-paste("p_value")
names(df6)[4]<-paste("BIC")
names(df6)[5]<-paste("AIC")
df6$Lag <- 6
df6 <- df6[c(1,6,2,3,4,5)]
full_output <- rbind(full_output, df6)

df8 <- cbind(rownames(df8), data.frame(df8, row.names=NULL)) 
names(df8)[1]<-paste("State")
names(df8)[2]<-paste("Coefficient")
names(df8)[3]<-paste("p_value")
names(df8)[4]<-paste("BIC")
names(df8)[5]<-paste("AIC")
df8$Lag <- 8
df8 <- df8[c(1,6,2,3,4,5)]
full_output <- rbind(full_output, df8)

df10 <- cbind(rownames(df10), data.frame(df10, row.names=NULL)) 
names(df10)[1]<-paste("State")
names(df10)[2]<-paste("Coefficient")
names(df10)[3]<-paste("p_value")
names(df10)[4]<-paste("BIC")
names(df10)[5]<-paste("AIC")
df10$Lag <- 10
df10 <- df10[c(1,6,2,3,4,5)]
full_output <- rbind(full_output, df10)

# Sort the df by adm1 and save it to a csv 
full_output <- full_output %>% arrange(Adm1)
write.csv(full_output, "full_output.csv")

`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````

## INCIDENCE RATE RATIO 

# All my results are in logged coefficient values, to transform them into incidence rate ratio use 
exp(coefficient_value)
full_output <- full_output %>% mutate(IRR = exp(Coefficient)


`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````

## PERCENTAGE ATTRIBUTABLE FRACTION

# Same data and manipulation as the formattibg for the swimmers to begin with 
# Total duration of conflict in each Adm1
# Create conflict periods 
conf <- conf[c(2,10)]
conf <- conf %>% distinct()
names(conf)[2]<-paste("Conflict")

conf$start <- 1
conf$end <- 1220

conf_orig <-  conf %>%
  mutate(weeks_from_start = Conflict - start)

conf_orig <- conf_orig %>%
  arrange(weeks_from_start, Adm1) %>%
  group_by(Adm1) %>%
  mutate(conflict_gap = weeks_from_start - lag(weeks_from_start)) %>%
  mutate(conflict_gap = ifelse(is.na(conflict_gap), 0, conflict_gap))

gap = 1 

df1 <- conf_orig %>% group_by(Adm1) %>% 
  mutate(exp_start = case_when(
    conflict_gap == 0 ~ Conflict, 
    conflict_gap > gap ~ Conflict))

df1 <- df1 %>% group_by(Adm1) %>% 
  mutate(exp_end = case_when(
    lead(conflict_gap) > gap ~ Conflict, 
    is.na(lead(conflict_gap)) ~ Conflict,
    all(conflict_gap<gap) ~ max(Conflict))) %>% 
  arrange(Adm1)

df1 <- df1 %>% group_by(Adm1, exp_start, exp_end) %>% distinct() %>% ungroup()

df2 <- df1 %>% dplyr::select(Adm1, exp_start) %>% distinct() 
df2 <- df2 %>% dplyr::filter(!is.na(exp_start)) 
df2 <- df2 %>% group_by(Adm1) %>% 
  mutate(conflict_index = paste0(Adm1, "_", 1:n()))

df3 <- df1 %>% dplyr::select(Adm1, exp_end) %>% distinct() 
df3 <- df3 %>% dplyr::filter(!is.na(exp_end))
df3 <- df3 %>% group_by(Adm1) %>% 
  mutate(conflict_index = paste0(Adm1, "_", 1:n()))

conflict_periods <- left_join(df2, df3)
conflict_periods <- conflict_periods[c(1,2,4,3)]

# Add all the weeks in the conflict periods 
conflict_periods <- conflict_periods %>% 
  mutate(exp_period = case_when(
    exp_end-exp_start == 0 ~ 1, 
    exp_end-exp_start > 0 ~ exp_end-exp_start))

conflict_periods <- conflict_periods %>% group_by(Adm1) %>%
  mutate(exp_total = sum(exp_period))

# Number of outbreaks in the un-exposed period for each adm1
# Merge my conflict periods with the outbreaks 
outb <- outb[c(3,10)]
outb <- outb %>% distinct()
names(outb)[2]<-paste("Outbreaks")
outb <- merge(outb, conflict_periods, by = "Adm1", all = TRUE)
outb <- na.omit(outb)
outb <- outb[c(1,2,3,4)]

# If the outbreaks occurs outside the exp_period print 1, if it occurs within print 0
outb <- outb %>% 
  mutate(unexp_outb = case_when(
    Outbreaks < exp_start ~ 1, 
    Outbreaks == exp_start ~ 0,
    Outbreaks > exp_end ~ 1,
    Outbreaks == exp_end ~ 0,
    Outbreaks > exp_start ~ 0,
    Outbreaks < exp_end ~ 0))

# Add up all the outbreaks outside the exp_period 
outb2 <- outb[-c(3,4)]
outb2 <- outb2 %>% distinct()
outb_tally <- outb2 %>% group_by(Adm1) %>% tally()
outb3 <- subset(outb2, unexp_outb == 0)
outb3 <- outb3 %>% group_by(Adm1) %>% tally()
outb4 <- merge(outb_tally, outb3, by = "Adm1", all = TRUE)
names(outb4)[2]<-paste("outb_total")
names(outb4)[3]<-paste("outb_exp")
outb4[is.na(outb4)] = 0
outb4 <- outb4 %>% mutate(outb_unexp = outb_total - outb_exp)

# I now have a df that looks as follows:
paf
# A tibble: 37 x 6
#Adm1       Obs_period Exp_total   IRR          Unexp_outb Event_total
#<chr>            <dbl>     <dbl>   <dbl>             <dbl>       <dbl>
#1 Abia              1220       114 4.99              1684         782
#2 Adamawa           1220       174 4.51              8002         782
#3 Akwa Ibom         1220       127 0.000000306        214         782
#4 Anambra           1220       211 4.70               914         782
#5 Bauchi            1220       118 2.61              6816         782
#6 Bayelsa           1220       298 2.45              5917         782
#7 Benue             1220       221 4.57               386         782
#8 Borno             1220       517 6.41              7395         782
#9 Cross River       1220       154 3.93               997         782
#10 Delta            1220       404 3.03               419         782
# … with 27 more rows

# To estimate the number of outbreaks attributable to conflicts, the equation is as follows: 
(((Unexp_outb*Exp_total)/(Obs_period-Exp_total))*IRR-1)

paf <- paf %>% mutate(attri = (((Unexp_outb*Exp_total)/(Obs_period-Exp_total))*IRR-1))

# From this you can calculate population attributable fraction (PAF) (here population refers to the population in the adm1)
# This is the total number of outbreaks in the Adm1 attributable to conflict 
# This requires you attri number and the total number of outbreaks observed 
paf <- paf %>% mutate(paf = attri/Event_total)
write.csv(paf, "paf.csv")
















