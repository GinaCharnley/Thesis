## CHAPTER 3 - Using self-controlled case series to understand the relationship between conflict and cholera in Nigeria and the Democratic Republic of Congo
## SELF-CONTROLLED CASE SERIES NATIONAL, SUB-NATIONAL, INCIDENCE RATE RATIO, PERCENTAGE ATTRIBUTABLE FRACTION 

# Load packages 
library(data.table)
library(dplyr)
library(survival)
library(tidyr)
library(tibble)
library(tidyverse)
library(mosaic)

`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````

## SCCS 
# Check the Poisson distribution 
# Nigeria 
# Exp = 782
# Admin1 = 38

# DRC 
# Exp = 396
# Admin1 = 26

# You have N provinces and a total of x events. 
# Thus the rate of your Poisson process is lambda = x/N
lambda <- 782/38
lambda
qpois(0.5, lambda) # 0.5 is your probability

lambda <- 396/26
lambda
qpois(0.5, lambda)

n_rep <- 10000

tab_res=c(rep(NA, 165*n_rep)) # change to number of possible observations 
dim(tab_res)= c(n_rep, 165) # change to number of possible observations 
for (i in 1:n_rep){
  vec = rpois(38, lambda) # number of admin1 
  for (y in 1:165){ # change to number of possible observations 
    tab_res[i, y] = table(vec)[y]
  }
}
tab_res[is.na(tab_res)]=0
quant = apply(tab_res, 2, quantile, probs = c(0.005, 0.995))
quant2 = apply(tab_res, 2, median)

Obs <- read_excel("~/Chapter 3 - SCCS/Data/SCCS/1997-2020, all new.xlsx", 
                  sheet = "Poisson_obs")
obs_nga <- as.numeric(Obs$Obs_nga)
obs_cod <- as.numeric(Obs$Obs_cod)
obs_cod <- na.omit(obs_cod)

quant <- data.frame(t(quant))
quant$Outreaks <- seq(1,165,1) # change second number to number of possible observations 
quant <- cbind(quant, quant2)
quant <- cbind(quant, obs_nga) # change depending on country 
quant <- quant[c(3,5,4,1,2)]
names(quant)[3]<-paste("exp")
names(quant)[4]<-paste("low")
names(quant)[5]<-paste("high") 

# The distribution fits 

# Load in data and format 
outb <- read_excel("1997-2020, all new.xlsx", sheet = "outb_nga")
conf <- read_excel("1997-2020, all new.xlsx", sheet = "conf_nga")                                                                                                            
outb <- outb[c(3,10)]
conf <- conf[c(2,10)]
names(outb)[2]<-paste("eventday")
names(conf)[2]<-paste("exday")
outb <- outb %>% distinct()
conf <- conf %>% distinct()
data1 <- merge(outb, conf, by = "Adm1", all = TRUE)
data1 <- na.omit(data1)

# Create observation period 
data1$start <- 1
data1$end <- 1220

# Create exposure period
data1$start1 <- data1$exday + 0 
data1$end1 <- data1$exday + 1
data1$end2 <- data1$exday + 2
data1$end4 <- data1$exday + 4
data1$end6 <- data1$exday + 6
data1$end8 <- data1$exday + 8
data1$end10 <- data1$exday + 10 

# Create an ID number of each exposure in each Adm1
data1 <- data1  %>% 
  mutate(indiv = group_indices(., Adm1, exday, eventday)) 
data1 <- data1 %>% distinct()

# Fit the model for each exposure period 
data1 <- data1 %>% gather(exp_name, exp_end, 7:12)

adm_data <- unique(data1$exp_name)
adm_list <- data1 %>% group_split(exp_name)
names(adm_list) <- sapply(adm_list, function(x) x$exp_name[1])

clogdf <- lapply(adm_list, FUN = function(adm_data) {
  datLong <- plyr::ddply(.data = adm_data,
                         .variables = "indiv",
                         .fun = function(df) {
                           
                           cuts <- with(df, sort(c(start, end, start1, exp_end))) 
                           
                           out <- data.frame(indiv = df$indiv,
                                             exday = df$exday,
                                             eventday = df$eventday,
                                             start = head(cuts, -1),
                                             end   = cuts[-1])
                           
                           out$event <- as.numeric(out$start <= df$eventday & df$eventday <= out$end)
                           
                           out$exgr <- as.numeric(df$start1 <= out$start & out$end <= df$exp_end)
                           
                           out$interval <- out$end - out$start
                           out$loginterval <- log(out$interval)
                           
                           out
                         })
  datLong <- subset(datLong, start < 1220) 
  datLong[datLong=="-Inf"]<-0
  clogit <- clogit(event ~ exgr + strata(indiv) + offset(loginterval), data = datLong)
  clog_sum <- summary(clogit)
  clogdf <- data.frame(clog_sum[["coefficients"]]) 
  clogdf <- cbind(clogdf, clog_sum[["conf.int"]]) 
  clogdf <- clogdf[-c(1,3,4,6,7)] 
})
  
df1 <- do.call("rbind", clogdf)
df1 <- rownames_to_column(df1, "Lag")
df1 <- df1 %>% mutate(Lag = str_remove_all(Lag, "end"))
names(df1)[2]<-paste("IRR")
names(df1)[3]<-paste("p_value")
names(df1)[4]<-paste("IRR_low")
names(df1)[5]<-paste("IRR_high")

# When comparing gnm to clogit, this was the function for gnm 
gnm(event ~ exgr + offset(loginterval), data = chopdat, family = poisson(link = "log"), eliminate = indiv)

`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````

## SENSITIVITY ANALYSIS FOR OUTBREAK DEFINITION 

# Scenario 1 - Remove all outbreaks within 2 weeks of each other 
# Scenario 2 - Remove all outbreaks within 3 weeks of each other 
# Scenario 3 - Remove all outbreaks within 8 weeks of each other 
# Scenario 4 - Remove all outbreaks within 28 weeks of each other 

outb <- outb[c(3,10)]
conf <- conf[c(2,10)]
names(outb)[2]<-paste("eventday")
names(conf)[2]<-paste("exday")
outb <- outb %>% distinct()
conf <- conf %>% distinct()

# Remove events depending on the sensitivity scenario 
outb <- outb[with(outb, order(Adm1, eventday)), ]
gap = 2 # changing according to the scenario 

outb <- outb %>% group_by(Adm1) %>% mutate(outbreak_gap = eventday - lag(eventday))
outb[is.na(outb)] <- 1000 # this is a unique number to identify the first outbreak/province 

outb <- outb %>% group_by(Adm1) %>% mutate(eventday1 = 
  case_when(outbreak_gap == 1000 ~ eventday,
            outbreak_gap > gap ~ eventday))

outb <- outb[-c(2,3)]
outb <- na.omit(outb)
names(outb)[2]<-paste("eventday")

# Merge the new outbreak dataframe with the conflict data 
data1 <- merge(outb, conf, by = "Adm1", all = TRUE)
data1 <- na.omit(data1)

# Fit this as normal to the national model 
# Repeat for each country and all four scenarios 


`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````

## SUB-NATIONAL
# Fit the models to the data for each exposure period and save output 
data1 <- data1 %>% gather(exp_name, exp_end, 7:12)
data1 <- data1 %>% mutate(df_name = paste(data1$Adm1, data1$exp_name, sep = "-"))

adm_data <- unique(data1$df_name)
adm_list <- data1 %>% group_split(Adm1, exp_name)
names(adm_list) <- sapply(adm_list, function(x) x$df_name[1])

clogdf <- lapply(adm_list, FUN = function(adm_data) {
  datLong <- plyr::ddply(.data = adm_data,
                         .variables = "indiv",
                         .fun = function(df) {
                           
                           cuts <- with(df, sort(c(start, end, start1, exp_end))) 
                           
                           out <- data.frame(indiv = df$indiv,
                                             exday = df$exday,
                                             eventday = df$eventday,
                                             start = head(cuts, -1),
                                             end   = cuts[-1])
                           
                           out$event <- as.numeric(out$start <= df$eventday & df$eventday <= out$end)
                           
                           out$exgr <- as.numeric(df$start1 <= out$start & out$end <= df$exp_end)
                           
                           out$interval <- out$end - out$start
                           out$loginterval <- log(out$interval)
                           
                           out
                         })
  datLong <- subset(datLong, start < 1220) 
  datLong[datLong=="-Inf"]<-0
  clogit <- clogit(event ~ exgr + strata(indiv) + offset(loginterval), data = datLong)
  clog_sum <- summary(clogit)
  clogdf <- data.frame(clog_sum[["coefficients"]]) 
  clogdf <- cbind(clogdf, clog_sum[["conf.int"]]) 
  clogdf <- clogdf[-c(1,3,4,6,7)] 
})

df1 <- do.call("rbind", clogdf)
df1 <- rownames_to_column(df1, "State")
df1 <- separate(data = df1, col = State, into = c("State", "Lag"), sep = "-")
df1 <- df1 %>% mutate(Lag = str_remove_all(Lag, "end"))
names(df1)[2]<-paste("IRR")
names(df1)[3]<-paste("p_value")
names(df1)[4]<-paste("IRR_low")
names(df1)[5]<-paste("IRR_high")


`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````

## INCIDENCE RATE RATIO 

# All my results are in logged coefficient values, to transform them into incidence rate ratio use 
exp(coefficient_value)
full_output <- full_output %>% mutate(IRR = exp(Coefficient)


`````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````````

## PERCENTAGE ATTRIBUTABLE FRACTION

# Same data and manipulation as the formattibg for the swimmers to begin with 
# Total duration of conflict in each Adm1
# Create conflict periods 
conf <- conf[c(2,10)]
conf <- conf %>% distinct()
names(conf)[2]<-paste("Conflict")

conf$start <- 1
conf$end <- 1220

conf_orig <-  conf %>%
  mutate(weeks_from_start = Conflict - start)

conf_orig <- conf_orig %>%
  arrange(weeks_from_start, Adm1) %>%
  group_by(Adm1) %>%
  mutate(conflict_gap = weeks_from_start - lag(weeks_from_start)) %>%
  mutate(conflict_gap = ifelse(is.na(conflict_gap), 0, conflict_gap))

gap = 1 

df1 <- conf_orig %>% group_by(Adm1) %>% 
  mutate(exp_start = case_when(
    conflict_gap == 0 ~ Conflict, 
    conflict_gap > gap ~ Conflict))

df1 <- df1 %>% group_by(Adm1) %>% 
  mutate(exp_end = case_when(
    lead(conflict_gap) > gap ~ Conflict, 
    is.na(lead(conflict_gap)) ~ Conflict,
    all(conflict_gap<gap) ~ max(Conflict))) %>% 
  arrange(Adm1)

df1 <- df1 %>% group_by(Adm1, exp_start, exp_end) %>% distinct() %>% ungroup()

df2 <- df1 %>% dplyr::select(Adm1, exp_start) %>% distinct() 
df2 <- df2 %>% dplyr::filter(!is.na(exp_start)) 
df2 <- df2 %>% group_by(Adm1) %>% 
  mutate(conflict_index = paste0(Adm1, "_", 1:n()))

df3 <- df1 %>% dplyr::select(Adm1, exp_end) %>% distinct() 
df3 <- df3 %>% dplyr::filter(!is.na(exp_end))
df3 <- df3 %>% group_by(Adm1) %>% 
  mutate(conflict_index = paste0(Adm1, "_", 1:n()))

conflict_periods <- left_join(df2, df3)
conflict_periods <- conflict_periods[c(1,2,4,3)]

# Add all the weeks in the conflict periods 
conflict_periods <- conflict_periods %>% 
  mutate(exp_period = case_when(
    exp_end-exp_start == 0 ~ 1, 
    exp_end-exp_start > 0 ~ exp_end-exp_start))

conflict_periods <- conflict_periods %>% group_by(Adm1) %>%
  mutate(exp_total = sum(exp_period))

# Number of outbreaks in the un-exposed period for each adm1
# Merge my conflict periods with the outbreaks 
outb <- outb[c(3,10)]
outb <- outb %>% distinct()
names(outb)[2]<-paste("Outbreaks")
outb <- merge(outb, conflict_periods, by = "Adm1", all = TRUE)
outb <- na.omit(outb)
outb <- outb[c(1,2,3,4)]

# If the outbreaks occurs outside the exp_period print 1, if it occurs within print 0
outb <- outb %>% 
  mutate(unexp_outb = case_when(
    Outbreaks < exp_start ~ 1, 
    Outbreaks == exp_start ~ 0,
    Outbreaks > exp_end ~ 1,
    Outbreaks == exp_end ~ 0,
    Outbreaks > exp_start ~ 0,
    Outbreaks < exp_end ~ 0))

# Add up all the outbreaks outside the exp_period 
outb2 <- outb[-c(3,4)]
outb2 <- outb2 %>% distinct()
outb_tally <- outb2 %>% group_by(Adm1) %>% tally()
outb3 <- subset(outb2, unexp_outb == 0)
outb3 <- outb3 %>% group_by(Adm1) %>% tally()
outb4 <- merge(outb_tally, outb3, by = "Adm1", all = TRUE)
names(outb4)[2]<-paste("outb_total")
names(outb4)[3]<-paste("outb_exp")
outb4[is.na(outb4)] = 0
outb4 <- outb4 %>% mutate(outb_unexp = outb_total - outb_exp)

# I now have a df that looks as follows:
paf
# A tibble: 37 x 6
#Adm1       Obs_period Exp_total   IRR          Unexp_outb Event_total
#<chr>            <dbl>     <dbl>   <dbl>             <dbl>       <dbl>
#1 Abia              1220       114 4.99              1684         782
#2 Adamawa           1220       174 4.51              8002         782
#3 Akwa Ibom         1220       127 0.000000306        214         782
#4 Anambra           1220       211 4.70               914         782
#5 Bauchi            1220       118 2.61              6816         782
#6 Bayelsa           1220       298 2.45              5917         782
#7 Benue             1220       221 4.57               386         782
#8 Borno             1220       517 6.41              7395         782
#9 Cross River       1220       154 3.93               997         782
#10 Delta            1220       404 3.03               419         782
# … with 27 more rows

# To estimate the number of outbreaks attributable to conflicts, the equation is as follows: 
(((Unexp_outb*Exp_total)/(Obs_period-Exp_total))*IRR-1)

paf <- paf %>% mutate(attri = (((Unexp_outb*Exp_total)/(Obs_period-Exp_total))*IRR-1))

# From this you can calculate population attributable fraction (PAF) (here population refers to the population in the adm1)
# This is the total number of outbreaks in the Adm1 attributable to conflict 
# This requires you attri number and the total number of outbreaks observed 
paf <- paf %>% mutate(paf = attri/Event_total)

# Add a bootstrap confidence interval 
atrib2 <- 
  function(IRR) {
    (((199*1104)/(1220-1104))*IRR-1) # the values in the equation need changing depending on country 
  }

p2 <- data.frame(atrib2(IRR = cod$IRR))
names(p2)[1]<-paste("a")
mean(p2$a)
## [1] 3729.647
boot2 <- do(1000) * mean(~a,data = resample(p2))
histogram(~mean,data = boot2)
## Middle of histogram should be around 21 
se <- sd(~mean, data = boot2)
confint(boot2, level = 0.95, method = "quantile")

paf <- 
  function(atrib) {
    atrib/396
  }
paf2 <- data.frame(paf(atrib = boot2))
sd(~mean, data = paf2)
## [1] 2.061401
# +/- this value to the median 















